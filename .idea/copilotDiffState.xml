<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Backend/appointment-service/src/main/java/com/example/appointmentservice/repository/CitaRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/appointment-service/src/main/java/com/example/appointmentservice/repository/CitaRepository.java" />
              <option name="originalContent" value="package com.example.appointmentservice.repository;&#10;&#10;import com.example.appointmentservice.model.Cita;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;public interface CitaRepository extends JpaRepository&lt;Cita, Long&gt; {&#10;    List&lt;Cita&gt; findByPacienteId(Long pacienteId);&#10;    List&lt;Cita&gt; findByMedicoId(Long medicoId);&#10;    List&lt;Cita&gt; findByMedicoIdAndFechaHoraBetween(Long medicoId, LocalDateTime start, LocalDateTime end);&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.appointmentservice.repository;&#10;&#10;import com.example.appointmentservice.model.Cita;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;public interface CitaRepository extends JpaRepository&lt;Cita, Long&gt; {&#10;    List&lt;Cita&gt; findByPacienteId(Long pacienteId);&#10;    List&lt;Cita&gt; findByMedicoId(Long medicoId);&#10;    List&lt;Cita&gt; findByMedicoIdAndFechaHoraBetween(Long medicoId, LocalDateTime start, LocalDateTime end);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Backend/appointment-service/src/main/java/com/example/appointmentservice/service/CitaService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Backend/appointment-service/src/main/java/com/example/appointmentservice/service/CitaService.java" />
              <option name="originalContent" value="package com.example.appointmentservice.service;&#10;&#10;import com.example.appointmentservice.model.Cita;&#10;import com.example.appointmentservice.model.EstadoCita;&#10;import com.example.appointmentservice.repository.CitaRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class CitaService {&#10;    private final CitaRepository citaRepository;&#10;    public CitaService(CitaRepository citaRepository) {&#10;        this.citaRepository = citaRepository;&#10;    }&#10;    public Cita crearCita(Cita cita) {&#10;        List&lt;Cita&gt; citasExistentes = citaRepository.findByMedicoIdAndFechaHoraBetween(&#10;                cita.getMedicoId(),&#10;                cita.getFechaHora().minusMinutes(30),&#10;                cita.getFechaHora().plusMinutes(30));&#10;        if (!citasExistentes.isEmpty()) {&#10;            throw new RuntimeException(&quot;Horario no disponible&quot;);&#10;        }&#10;        cita.setEstado(EstadoCita.PROGRAMADA);&#10;        return citaRepository.save(cita);&#10;    }&#10;    public Optional&lt;Cita&gt; obtenerCita(Long id) {&#10;        return citaRepository.findById(id);&#10;    }&#10;    public List&lt;Cita&gt; listarCitasPorPaciente(Long pacienteId) {&#10;        return citaRepository.findByPacienteId(pacienteId);&#10;    }&#10;    public List&lt;Cita&gt; listarCitasPorMedico(Long medicoId) {&#10;        return citaRepository.findByMedicoId(medicoId);&#10;    }&#10;    public Cita actualizarCita(Long id, Cita citaActualizada) {&#10;        Cita cita = citaRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Cita no encontrada&quot;));&#10;        cita.setFechaHora(citaActualizada.getFechaHora());&#10;        cita.setEstado(citaActualizada.getEstado());&#10;        cita.setNotas(citaActualizada.getNotas());&#10;        return citaRepository.save(cita);&#10;    }&#10;    public void cancelarCita(Long id) {&#10;        Cita cita = citaRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Cita no encontrada&quot;));&#10;        cita.setEstado(EstadoCita.CANCELADA);&#10;        citaRepository.save(cita);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.appointmentservice.service;&#10;&#10;import com.example.appointmentservice.model.Cita;&#10;import com.example.appointmentservice.model.EstadoCita;&#10;import com.example.appointmentservice.repository.CitaRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class CitaService {&#10;    private final CitaRepository citaRepository;&#10;    public CitaService(CitaRepository citaRepository) {&#10;        this.citaRepository = citaRepository;&#10;    }&#10;    public Cita crearCita(Cita cita) {&#10;        List&lt;Cita&gt; citasExistentes = citaRepository.findByMedicoIdAndFechaHoraBetween(&#10;                cita.getMedicoId(),&#10;                cita.getFechaHora().minusMinutes(30),&#10;                cita.getFechaHora().plusMinutes(30));&#10;        if (!citasExistentes.isEmpty()) {&#10;            throw new RuntimeException(&quot;Horario no disponible&quot;);&#10;        }&#10;        cita.setEstado(EstadoCita.PROGRAMADA);&#10;        return citaRepository.save(cita);&#10;    }&#10;    public Optional&lt;Cita&gt; obtenerCita(Long id) {&#10;        return citaRepository.findById(id);&#10;    }&#10;    public List&lt;Cita&gt; listarCitasPorPaciente(Long pacienteId) {&#10;        return citaRepository.findByPacienteId(pacienteId);&#10;    }&#10;    public List&lt;Cita&gt; listarCitasPorMedico(Long medicoId) {&#10;        return citaRepository.findByMedicoId(medicoId);&#10;    }&#10;    public Cita actualizarCita(Long id, Cita citaActualizada) {&#10;        Cita cita = citaRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Cita no encontrada&quot;));&#10;        cita.setFechaHora(citaActualizada.getFechaHora());&#10;        cita.setEstado(citaActualizada.getEstado());&#10;        cita.setNotas(citaActualizada.getNotas());&#10;        return citaRepository.save(cita);&#10;    }&#10;    public void cancelarCita(Long id) {&#10;        Cita cita = citaRepository.findById(id).orElseThrow(() -&gt; new RuntimeException(&quot;Cita no encontrada&quot;));&#10;        cita.setEstado(EstadoCita.CANCELADA);&#10;        citaRepository.save(cita);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>